import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator59.getNamingPolicy();
        generator59.setUseCache(true);
        java.lang.ClassLoader classLoader85 = generator59.getClassLoader();
        boolean boolean86 = generator59.getAttemptLoad();
        boolean boolean87 = generator59.getAttemptLoad();
        boolean boolean88 = generator59.getUseCache();
        generator59.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy58.generate((org.mockito.cglib.core.ClassGenerator) generator59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin59.newInstance(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        generator0.setDelegates(objArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        java.lang.ClassLoader classLoader85 = null;
        generator83.setClassLoader(classLoader85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator83.getNamingPolicy();
        generator83.setUseCache(true);
        boolean boolean90 = generator83.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator83.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator83.getStrategy();
        generator0.setStrategy(generatorStrategy92);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy63);
        generator6.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass70 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator45.setClasses(classArray57);
        generator36.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = generator36.create();
        org.mockito.cglib.proxy.Mixin mixin61 = generator36.create();
        generator36.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator64.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setUseCache(true);
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator64, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        generator36.setClasses(classArray83);
        org.mockito.cglib.core.Predicate predicate86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = namingPolicy8.getClassName("", "hi!", (java.lang.Object) generator36, predicate86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        generator10.setClasses(classArray19);
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray30);
        generator9.setDelegates((java.lang.Object[]) classArray30);
        generator9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        boolean boolean59 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator36.getStrategy();
        java.lang.Class[] classArray61 = null;
        generator36.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator63.getStrategy();
        generator36.setStrategy(generatorStrategy88);
        generator9.setStrategy(generatorStrategy88);
        boolean boolean92 = generatorStrategy88.equals((java.lang.Object) (short) 1);
        generator0.setStrategy(generatorStrategy88);
        java.lang.Class<?> wildcardClass94 = generatorStrategy88.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator13.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        generator6.setDelegates((java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = generator42.getUseCache();
        generator42.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator42.setStrategy(generatorStrategy68);
        generator42.setUseCache(true);
        generator42.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        java.lang.ClassLoader classLoader76 = null;
        generator74.setClassLoader(classLoader76);
        boolean boolean78 = generator74.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator80.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator80.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator86.getStrategy();
        generator80.setStrategy(generatorStrategy88);
        boolean boolean90 = namingPolicy79.equals((java.lang.Object) generator80);
        generator42.setNamingPolicy(namingPolicy79);
        generator0.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass11 = mixin10.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        boolean boolean43 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        generator30.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        java.lang.ClassLoader classLoader71 = null;
        generator69.setClassLoader(classLoader71);
        boolean boolean73 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy74);
        generator30.setNamingPolicy(namingPolicy74);
        generator30.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin79 = generator30.create();
        boolean boolean80 = generatorStrategy29.equals((java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator30.getStrategy();
        java.lang.ClassLoader classLoader82 = generator30.getClassLoader();
        boolean boolean83 = generator30.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator57.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator57.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator53.getNamingPolicy();
        generator53.setAttemptLoad(true);
        boolean boolean66 = generatorStrategy52.equals((java.lang.Object) generator53);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin67 = generator53.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator20.setClasses(classArray29);
        boolean boolean33 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        generator20.setDelegates(objArray43);
        generator20.setStyle(2);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        generator20.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = mixin57.newInstance((java.lang.Object[]) classArray63);
        generator0.setDelegates((java.lang.Object[]) classArray63);
        boolean boolean69 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader6 = null;
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        boolean boolean15 = generator13.getUseCache();
        java.lang.Object[] objArray17 = new java.lang.Object[] { generator13, true };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator20.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray27);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray61);
        boolean boolean63 = namingPolicy5.equals((java.lang.Object) mixin62);
        java.lang.Object obj66 = null;
        org.mockito.cglib.core.Predicate predicate67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = namingPolicy5.getClassName("", "hi!", obj66, predicate67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        boolean boolean39 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin40 = generator26.create();
        java.lang.ClassLoader classLoader41 = generator26.getClassLoader();
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray57);
        generator26.setClasses(classArray49);
        java.lang.ClassLoader classLoader64 = generator26.getClassLoader();
        generator0.setClassLoader(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classLoader64);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        generator6.setClasses(classArray26);
        boolean boolean29 = namingPolicy5.equals((java.lang.Object) classArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        boolean boolean45 = generator32.getUseCache();
        generator32.setAttemptLoad(false);
        generator32.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin50 = generator32.create();
        java.lang.ClassLoader classLoader51 = generator32.getClassLoader();
        java.lang.ClassLoader classLoader52 = generator32.getClassLoader();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray55);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray55);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = generator20.getUseCache();
        generator20.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray66);
        generator20.setClasses(classArray55);
        boolean boolean70 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = generator20.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator72.setStrategy(generatorStrategy74);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        generator72.setClasses(classArray81);
        java.lang.Object[] objArray91 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray81);
        generator19.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        generator22.setUseCache(true);
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator22.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator22.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy50);
        org.mockito.asm.ClassVisitor classVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        boolean boolean31 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        generator18.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray65);
        generator18.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        boolean boolean25 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        boolean boolean40 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        generator27.setDelegates(objArray50);
        boolean boolean54 = generatorStrategy26.equals((java.lang.Object) generator27);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getAttemptLoad();
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator56.setDelegates((java.lang.Object[]) classArray63);
        java.lang.ClassLoader classLoader65 = null;
        generator56.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator56.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator68.getStrategy();
        generator68.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator74.getStrategy();
        generator68.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator68.getNamingPolicy();
        boolean boolean79 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean82 = namingPolicy67.equals((java.lang.Object) true);
        generator27.setNamingPolicy(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin42.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass56 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator27.setStrategy(generatorStrategy43);
        boolean boolean45 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        generator27.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        boolean boolean84 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator14.setClasses(classArray26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        boolean boolean36 = generator34.getUseCache();
        java.lang.Object[] objArray38 = new java.lang.Object[] { generator34, true };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin41.newInstance((java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin41.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        boolean boolean60 = namingPolicy13.equals((java.lang.Object) mixin59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = generator63.create();
        org.mockito.cglib.core.Predicate predicate76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = namingPolicy13.getClassName("hi!", "", (java.lang.Object) mixin75, predicate76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin28 = generator12.create();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = mixin37.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setUseCache(true);
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator46, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        generator12.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator68.setStrategy(generatorStrategy70);
        generator68.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator68.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        generator75.setClassLoader(classLoader77);
        boolean boolean79 = generator75.getAttemptLoad();
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator75.setClasses(classArray87);
        java.lang.ClassLoader classLoader89 = null;
        generator75.setClassLoader(classLoader89);
        boolean boolean91 = generator75.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator75.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy92);
        generator12.setNamingPolicy(namingPolicy92);
        generator0.setNamingPolicy(namingPolicy92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, (java.lang.Object[]) classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin12.newInstance((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin56.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator65.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator65, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator0.setDelegates(objArray81);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        java.lang.Class<?> wildcardClass7 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        boolean boolean39 = generator37.getUseCache();
        java.lang.Object[] objArray41 = new java.lang.Object[] { generator37, true };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator44.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setAttemptLoad(true);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        generator62.setDelegates(objArray71);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray82);
        generator62.setClasses(classArray82);
        boolean boolean85 = namingPolicy61.equals((java.lang.Object) classArray82);
        java.lang.ClassLoader classLoader86 = null;
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, (java.lang.Object[]) classArray92);
        boolean boolean96 = namingPolicy61.equals((java.lang.Object) classArray92);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin55.newInstance((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        generator0.setClasses(classArray23);
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass39 = classLoader38.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass7 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        boolean boolean43 = namingPolicy30.equals((java.lang.Object) mixin42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        generator44.setUseCache(true);
        boolean boolean53 = generator44.getAttemptLoad();
        boolean boolean54 = generator44.getUseCache();
        boolean boolean55 = generator44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator57.setStrategy(generatorStrategy70);
        generator57.setUseCache(false);
        boolean boolean74 = generator57.getAttemptLoad();
        boolean boolean75 = generatorStrategy56.equals((java.lang.Object) generator57);
        boolean boolean76 = namingPolicy30.equals((java.lang.Object) boolean75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        generator15.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Object[] objArray64 = null;
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator66.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        boolean boolean88 = generator86.getUseCache();
        java.lang.Object[] objArray90 = new java.lang.Object[] { generator86, true };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray90);
        generator0.setDelegates(objArray90);
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        boolean boolean98 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator11.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator11.getStrategy();
        boolean boolean37 = generatorStrategy9.equals((java.lang.Object) generator11);
        org.mockito.cglib.proxy.Mixin mixin38 = generator11.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator11.getNamingPolicy();
        java.lang.Class[] classArray42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray45);
        org.mockito.cglib.core.Predicate predicate49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = namingPolicy39.getClassName("hi!", "hi!", (java.lang.Object) objArray45, predicate49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        boolean boolean87 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        java.lang.Object[] objArray25 = null;
        generator0.setDelegates(objArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = mixin32.newInstance((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator50, true };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator57.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        generator0.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin35 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        boolean boolean56 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator57.getStrategy();
        generator57.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        generator57.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator57.getStrategy();
        generator0.setStrategy(generatorStrategy68);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator52.getStrategy();
        generator52.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator58.getStrategy();
        generator52.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator52.getStrategy();
        boolean boolean63 = generator52.getAttemptLoad();
        boolean boolean64 = namingPolicy51.equals((java.lang.Object) generator52);
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator52.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = namingPolicy13.equals((java.lang.Object) classArray34);
        generator6.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator6.getNamingPolicy();
        boolean boolean41 = namingPolicy39.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy39);
        java.lang.Class<?> wildcardClass43 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator1.setClassLoader(classLoader3);
        boolean boolean5 = generator1.getAttemptLoad();
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = null;
        generator1.setClassLoader(classLoader15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator1.setStrategy(generatorStrategy17);
        boolean boolean19 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = generator20.getUseCache();
        generator20.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray66);
        generator20.setClasses(classArray55);
        boolean boolean70 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = generator20.getClassLoader();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray78);
        generator1.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        boolean boolean66 = generator53.getUseCache();
        generator53.setAttemptLoad(false);
        generator53.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin71 = generator53.create();
        java.lang.ClassLoader classLoader72 = generator53.getClassLoader();
        java.lang.ClassLoader classLoader73 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader73);
        boolean boolean75 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray49);
        generator0.setStyle(0);
        boolean boolean64 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        generator0.setStyle(1);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin46.newInstance((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean80 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        java.lang.ClassLoader classLoader84 = null;
        generator82.setClassLoader(classLoader84);
        generator82.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator82.getStrategy();
        generator82.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy81.generate((org.mockito.cglib.core.ClassGenerator) generator82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        generator48.setDelegates(objArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        generator48.setClasses(classArray68);
        generator48.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator48.getStrategy();
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray81, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        generator48.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray81);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        boolean boolean65 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean68 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator3.setStrategy(generatorStrategy9);
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean15 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator16.setNamingPolicy(namingPolicy23);
        boolean boolean25 = generator16.getAttemptLoad();
        java.lang.Object[] objArray26 = null;
        generator16.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator28.getStrategy();
        generator28.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator38.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator38.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator38.getStrategy();
        generator28.setStrategy(generatorStrategy53);
        generator16.setStrategy(generatorStrategy53);
        java.lang.Object obj56 = null;
        boolean boolean57 = generatorStrategy53.equals(obj56);
        generator3.setStrategy(generatorStrategy53);
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator60.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator60.getAttemptLoad();
        java.lang.Object[] objArray70 = null;
        generator60.setDelegates(objArray70);
        boolean boolean72 = generator60.getAttemptLoad();
        generator60.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray75 = generatorStrategy53.generate((org.mockito.cglib.core.ClassGenerator) generator60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        generator20.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator20.setDelegates(objArray33);
        boolean boolean38 = generatorStrategy18.equals((java.lang.Object) objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator58.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator58.getStrategy();
        generator51.setStrategy(generatorStrategy73);
        generator39.setStrategy(generatorStrategy73);
        boolean boolean76 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator79.setStrategy(generatorStrategy81);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator79.setClasses(classArray88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = null;
        generator79.setStrategy(generatorStrategy92);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator79.getNamingPolicy();
        boolean boolean95 = namingPolicy78.equals((java.lang.Object) generator79);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator79.getNamingPolicy();
        boolean boolean97 = generatorStrategy18.equals((java.lang.Object) namingPolicy96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.Object[] objArray8 = null;
        generator0.setDelegates(objArray8);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator12.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = generator21.getUseCache();
        generator21.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator47.setClasses(classArray56);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray67);
        generator21.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        java.lang.ClassLoader classLoader73 = null;
        generator71.setClassLoader(classLoader73);
        boolean boolean75 = generator71.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean87 = namingPolicy76.equals((java.lang.Object) classArray85);
        generator12.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy89);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy93);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator28.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy60);
        generator28.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator17.setClassLoader(classLoader22);
        generator17.setStyle(2);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin32.newInstance((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator66.setClasses(classArray75);
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin42.newInstance((java.lang.Object[]) classArray86);
        generator17.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator9.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) classArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray8);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin25.newInstance((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        java.lang.Object[] objArray39 = null;
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        java.lang.Object[] objArray23 = null;
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray37);
        boolean boolean41 = generatorStrategy25.equals((java.lang.Object) objArray37);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy16);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = namingPolicy37.equals((java.lang.Object) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        java.lang.Object[] objArray65 = null;
        generator0.setDelegates(objArray65);
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        boolean boolean23 = generator21.getUseCache();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator21, true };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin39.newInstance((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator11.setClasses(classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator31, true };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = generator17.getUseCache();
        generator17.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        generator17.setClasses(classArray52);
        boolean boolean67 = generator17.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = generator17.getClassLoader();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin22.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class<?> wildcardClass49 = mixin48.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        generator10.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator10.getNamingPolicy();
        boolean boolean45 = namingPolicy43.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy43);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = generator38.getUseCache();
        generator38.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator38.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator68.getStrategy();
        generator66.setStrategy(generatorStrategy75);
        generator38.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator38.getStrategy();
        generator0.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin85.newInstance((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        generator0.setClasses(classArray96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        boolean boolean51 = generator28.getUseCache();
        generator28.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator28.setStrategy(generatorStrategy54);
        generator28.setAttemptLoad(false);
        java.lang.ClassLoader classLoader58 = generator28.getClassLoader();
        boolean boolean59 = namingPolicy27.equals((java.lang.Object) classLoader58);
        java.lang.Class<?> wildcardClass60 = classLoader58.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator48.getStrategy();
        generator48.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        boolean boolean55 = generatorStrategy47.equals((java.lang.Object) generator48);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        boolean boolean69 = generator56.getUseCache();
        generator56.setAttemptLoad(false);
        generator56.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin74 = generator56.create();
        java.lang.ClassLoader classLoader75 = generator56.getClassLoader();
        java.lang.ClassLoader classLoader76 = generator56.getClassLoader();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        boolean boolean85 = generatorStrategy47.equals((java.lang.Object) mixin84);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        generator86.setUseCache(true);
        boolean boolean90 = generator86.getUseCache();
        java.lang.ClassLoader classLoader91 = null;
        generator86.setClassLoader(classLoader91);
        generator86.setStyle(2);
        generator86.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = generatorStrategy47.generate((org.mockito.cglib.core.ClassGenerator) generator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = namingPolicy22.equals((java.lang.Object) classArray43);
        generator15.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator48.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator48.setNamingPolicy(namingPolicy55);
        boolean boolean57 = generator48.getAttemptLoad();
        java.lang.Object[] objArray58 = null;
        generator48.setDelegates(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        generator48.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        boolean boolean85 = namingPolicy22.equals((java.lang.Object) classArray80);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        boolean boolean25 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        boolean boolean80 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generatorStrategy32.equals((java.lang.Object) generator33);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        boolean boolean76 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean87 = generatorStrategy77.equals((java.lang.Object) classArray85);
        generator33.setClasses(classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        boolean boolean91 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass92 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setUseCache(true);
        boolean boolean17 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        boolean boolean48 = generator35.getUseCache();
        generator35.setAttemptLoad(false);
        generator35.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin53 = generator35.create();
        java.lang.ClassLoader classLoader54 = generator35.getClassLoader();
        java.lang.ClassLoader classLoader55 = generator35.getClassLoader();
        boolean boolean56 = generatorStrategy34.equals((java.lang.Object) classLoader55);
        generator0.setClassLoader(classLoader55);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin60 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        java.lang.Object obj4 = null;
        boolean boolean5 = generatorStrategy3.equals(obj4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = namingPolicy13.equals((java.lang.Object) classArray34);
        generator6.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator39.getStrategy();
        boolean boolean66 = namingPolicy13.equals((java.lang.Object) generator39);
        boolean boolean67 = generatorStrategy3.equals((java.lang.Object) namingPolicy13);
        java.lang.Object obj68 = null;
        boolean boolean69 = generatorStrategy3.equals(obj68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        boolean boolean78 = generator76.getUseCache();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator76, true };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        boolean boolean85 = generatorStrategy3.equals((java.lang.Object) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator10.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator10.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray67);
        generator10.setClasses(classArray28);
        java.lang.ClassLoader classLoader84 = generator10.getClassLoader();
        generator10.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader87 = generator10.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator29.getStrategy();
        generator22.setStrategy(generatorStrategy44);
        generator22.setAttemptLoad(false);
        boolean boolean48 = generatorStrategy21.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        boolean boolean35 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator33.getStrategy();
        generator33.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray54);
        generator33.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator72.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray79);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        generator28.setDelegates((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin28.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = mixin22.newInstance((java.lang.Object[]) classArray37);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader80 = generator25.getClassLoader();
        boolean boolean81 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator25.getStrategy();
        boolean boolean83 = generator25.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin84 = generator25.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray69);
        generator49.setClasses(classArray69);
        boolean boolean72 = namingPolicy48.equals((java.lang.Object) classArray69);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        generator0.setClasses(classArray73);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator8.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        boolean boolean30 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setUseCache(true);
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator26, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin19.newInstance((java.lang.Object[]) classArray25);
        java.lang.Object[] objArray50 = null;
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray50);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.ClassLoader classLoader56 = null;
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray62);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray74);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin67.newInstance((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        java.lang.ClassLoader classLoader84 = null;
        generator82.setClassLoader(classLoader84);
        boolean boolean86 = generator82.getAttemptLoad();
        java.lang.Object[] objArray93 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray93);
        generator82.setClasses(classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        boolean boolean98 = namingPolicy54.equals((java.lang.Object) mixin97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader55 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader55);
        java.lang.Class<?> wildcardClass57 = classLoader55.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        boolean boolean65 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean68 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator51.setStrategy(generatorStrategy57);
        generator51.setAttemptLoad(true);
        generator51.setUseCache(true);
        boolean boolean63 = generator51.getUseCache();
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        generator51.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator0.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = null;
        generator76.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setUseCache(true);
        java.lang.Object[] objArray92 = new java.lang.Object[] { generator76, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator35.setClasses(classArray47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        boolean boolean57 = generator55.getUseCache();
        java.lang.Object[] objArray59 = new java.lang.Object[] { generator55, true };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray59);
        boolean boolean64 = generatorStrategy25.equals((java.lang.Object) mixin63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        generator65.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator65.getStrategy();
        boolean boolean75 = generatorStrategy25.equals((java.lang.Object) generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator76.getNamingPolicy();
        generator76.setUseCache(true);
        boolean boolean83 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator76.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator76.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        boolean boolean18 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        generator5.setDelegates(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        generator5.setDelegates((java.lang.Object[]) classArray52);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator64.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray71);
        generator5.setClasses(classArray63);
        boolean boolean75 = namingPolicy4.equals((java.lang.Object) generator5);
        org.mockito.cglib.proxy.Mixin mixin76 = generator5.create();
        boolean boolean77 = generator5.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator48.getStrategy();
        generator41.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        generator41.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass11 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        generator26.setUseCache(false);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray80);
        generator34.setClasses(classArray69);
        boolean boolean84 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = generator34.getClassLoader();
        generator26.setClassLoader(classLoader85);
        generator17.setClassLoader(classLoader85);
        generator12.setClassLoader(classLoader85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator12.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        generator39.setUseCache(true);
        generator39.setUseCache(false);
        generator39.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        generator68.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setUseCache(true);
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator68, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator39.setClasses(classArray87);
        boolean boolean89 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin90 = generator39.create();
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy36.getClassName("hi!", "", (java.lang.Object) generator39, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator12.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator12.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader47 = generator12.getClassLoader();
        generator5.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray69);
        generator49.setClasses(classArray69);
        generator49.setUseCache(true);
        generator49.setUseCache(false);
        java.lang.ClassLoader classLoader76 = generator49.getClassLoader();
        generator5.setClassLoader(classLoader76);
        generator5.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin45.newInstance((java.lang.Object[]) classArray54);
        boolean boolean57 = generatorStrategy37.equals((java.lang.Object) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator62.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator58.getNamingPolicy();
        boolean boolean69 = generator58.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator70.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator70.getStrategy();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray85);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        boolean boolean90 = generatorStrategy78.equals((java.lang.Object) classArray89);
        generator58.setClasses(classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin40.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray61);
        boolean boolean76 = namingPolicy32.equals((java.lang.Object) mixin75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        java.lang.ClassLoader classLoader79 = null;
        generator77.setClassLoader(classLoader79);
        boolean boolean81 = generator77.getAttemptLoad();
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator77.setClasses(classArray89);
        java.lang.ClassLoader classLoader91 = null;
        generator77.setClassLoader(classLoader91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = null;
        generator77.setStrategy(generatorStrategy93);
        boolean boolean95 = namingPolicy32.equals((java.lang.Object) generator77);
        generator77.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator77.getNamingPolicy();
        java.lang.Class<?> wildcardClass99 = namingPolicy98.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(namingPolicy98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin27.newInstance((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        boolean boolean53 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        generator40.setDelegates(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        generator40.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = mixin21.newInstance((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        boolean boolean31 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        boolean boolean27 = generator14.getUseCache();
        generator14.setAttemptLoad(false);
        generator14.setAttemptLoad(false);
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator37.setClassLoader(classLoader42);
        generator37.setStyle(2);
        generator37.setUseCache(true);
        boolean boolean48 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator37.getStrategy();
        generator14.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader54 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator48.getStrategy();
        generator48.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        boolean boolean55 = generatorStrategy47.equals((java.lang.Object) generator48);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator48.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        java.lang.Class<?> wildcardClass48 = classArray46.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        generator34.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        generator30.setClasses(classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator8.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = mixin24.newInstance((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        boolean boolean50 = generator37.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        generator37.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        generator37.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin18.newInstance((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        java.lang.Class<?> wildcardClass93 = classArray91.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        java.lang.Class<?> wildcardClass76 = generator25.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator8.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = null;
        generator8.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray50);
        generator30.setClasses(classArray50);
        boolean boolean53 = generator30.getUseCache();
        generator30.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray76);
        generator30.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray65);
        generator8.setClasses(classArray26);
        java.lang.ClassLoader classLoader82 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin83 = generator8.create();
        java.lang.ClassLoader classLoader84 = generator8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        java.lang.ClassLoader classLoader87 = null;
        generator0.setClassLoader(classLoader87);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator94 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray95 = generatorStrategy93.generate(classGenerator94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        java.lang.Object obj8 = null;
        boolean boolean9 = generatorStrategy7.equals(obj8);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray14);
        java.lang.Class<?> wildcardClass43 = classArray14.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator1.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray63);
        boolean boolean67 = namingPolicy51.equals((java.lang.Object) objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray63);
        java.lang.Class<?> wildcardClass69 = mixin68.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass22 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator5.getStrategy();
        generator5.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator11.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator11.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy26);
        boolean boolean28 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = generatorStrategy4.generate((org.mockito.cglib.core.ClassGenerator) generator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator14.setStrategy(generatorStrategy40);
        generator14.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator14.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        boolean boolean58 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        generator45.setDelegates(objArray68);
        generator45.setStyle(2);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator45.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray77);
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass86 = generatorStrategy85.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        generator0.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        boolean boolean67 = namingPolicy43.equals((java.lang.Object) classArray64);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray74);
        boolean boolean78 = namingPolicy43.equals((java.lang.Object) classArray74);
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray45);
        boolean boolean47 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator50.getStrategy();
        generator48.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        java.lang.ClassLoader classLoader73 = null;
        generator71.setClassLoader(classLoader73);
        boolean boolean75 = generator71.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy76);
        generator48.setNamingPolicy(namingPolicy76);
        boolean boolean79 = generator48.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator48.getNamingPolicy();
        boolean boolean82 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator48.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        generator0.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator36.getNamingPolicy();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin46.newInstance((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        boolean boolean84 = namingPolicy40.equals((java.lang.Object) classArray55);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin35.newInstance((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        boolean boolean38 = generator25.getUseCache();
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        java.lang.ClassLoader classLoader44 = generator25.getClassLoader();
        java.lang.ClassLoader classLoader45 = generator25.getClassLoader();
        boolean boolean46 = generatorStrategy24.equals((java.lang.Object) classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator47.getStrategy();
        generator47.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator53.getStrategy();
        generator47.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator47.getNamingPolicy();
        boolean boolean58 = generator47.getUseCache();
        generator47.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator61.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setUseCache(true);
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator61, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator47.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray84);
        java.lang.Class<?> wildcardClass88 = classArray84.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        boolean boolean30 = generator28.getUseCache();
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator28, true };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator66.setDelegates((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray76);
        boolean boolean78 = namingPolicy20.equals((java.lang.Object) mixin77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        generator79.setUseCache(true);
        boolean boolean83 = generator79.getUseCache();
        generator79.setAttemptLoad(true);
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        generator79.setDelegates(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        boolean boolean92 = namingPolicy20.equals((java.lang.Object) objArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        boolean boolean95 = generatorStrategy14.equals((java.lang.Object) objArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        boolean boolean54 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator16.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        generator16.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader51 = generator16.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator52.setClasses(classArray64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        boolean boolean74 = generator72.getUseCache();
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator72, true };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray87);
        generator0.setClassLoader(classLoader51);
        boolean boolean95 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator13.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        generator13.setClassLoader(classLoader27);
        boolean boolean29 = generator13.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray51);
        generator13.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        boolean boolean59 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin60 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        boolean boolean30 = generator0.getUseCache();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator33, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin32.newInstance(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin25.newInstance(objArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Object[] objArray56 = null;
        org.mockito.cglib.proxy.Mixin mixin57 = mixin55.newInstance(objArray56);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = namingPolicy22.equals((java.lang.Object) classArray43);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        boolean boolean62 = generator49.getUseCache();
        generator49.setAttemptLoad(false);
        generator49.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin67 = generator49.create();
        java.lang.ClassLoader classLoader68 = generator49.getClassLoader();
        java.lang.ClassLoader classLoader69 = generator49.getClassLoader();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray72);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray72);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin26 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator35.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator28.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        generator28.setDelegates((java.lang.Object[]) classArray59);
        generator0.setClasses(classArray59);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        generator0.setStyle((int) (short) 1);
        boolean boolean72 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray38);
        generator0.setDelegates((java.lang.Object[]) classArray38);
        boolean boolean43 = generator0.getUseCache();
        java.lang.Object[] objArray44 = null;
        generator0.setDelegates(objArray44);
        java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader46);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray49);
        generator0.setStyle(0);
        boolean boolean64 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean67 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        java.lang.Class<?> wildcardClass72 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin mixin29 = generator10.create();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        generator10.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator49.getNamingPolicy();
        generator49.setAttemptLoad(false);
        generator49.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator62.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator62.setClasses(classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator62.getStrategy();
        generator49.setStrategy(generatorStrategy77);
        generator10.setStrategy(generatorStrategy77);
        boolean boolean80 = namingPolicy9.equals((java.lang.Object) generator10);
        boolean boolean81 = generator10.getAttemptLoad();
        generator10.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin mixin31 = generator12.create();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        generator12.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray77);
        generator57.setClasses(classArray77);
        boolean boolean80 = namingPolicy56.equals((java.lang.Object) classArray77);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        boolean boolean91 = namingPolicy56.equals((java.lang.Object) classArray87);
        generator12.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        boolean boolean95 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass97 = classLoader96.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader72 = generator0.getClassLoader();
        boolean boolean73 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        boolean boolean37 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        boolean boolean43 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator45.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator45.setNamingPolicy(namingPolicy52);
        boolean boolean54 = generator45.getAttemptLoad();
        java.lang.Object[] objArray55 = null;
        generator45.setDelegates(objArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator45.getStrategy();
        generator38.setStrategy(generatorStrategy57);
        generator0.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray66 = generatorStrategy57.generate((org.mockito.cglib.core.ClassGenerator) generator60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, (java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator1.setClassLoader(classLoader3);
        boolean boolean5 = generator1.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator1.setNamingPolicy(namingPolicy8);
        boolean boolean10 = generator1.getAttemptLoad();
        java.lang.Object[] objArray11 = null;
        generator1.setDelegates(objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator23.setStrategy(generatorStrategy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator23.getStrategy();
        generator13.setStrategy(generatorStrategy38);
        generator1.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin46.newInstance((java.lang.Object[]) classArray55);
        boolean boolean58 = generatorStrategy38.equals((java.lang.Object) classArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin12.newInstance((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator26.getStrategy();
        generator24.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = namingPolicy41.equals((java.lang.Object) classArray62);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        boolean boolean76 = namingPolicy41.equals((java.lang.Object) classArray72);
        generator24.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray78 = null;
        generator24.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator24.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        java.lang.Object obj94 = null;
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy91.getClassName("hi!", "", obj94, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        boolean boolean54 = generator0.getUseCache();
        generator0.setStyle(0);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator33.setStrategy(generatorStrategy39);
        generator33.setAttemptLoad(true);
        generator33.setUseCache(true);
        boolean boolean45 = generator33.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator33.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean56 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setStyle(0);
        generator33.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader61 = generator33.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        generator6.setClasses(classArray26);
        boolean boolean29 = namingPolicy5.equals((java.lang.Object) classArray26);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray36);
        boolean boolean40 = namingPolicy5.equals((java.lang.Object) classArray36);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator61.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setUseCache(true);
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator61, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator42.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = mixin41.newInstance((java.lang.Object[]) classArray80);
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin82.newInstance((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        boolean boolean32 = generator27.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = namingPolicy40.equals((java.lang.Object) classArray61);
        generator33.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator33.getNamingPolicy();
        boolean boolean68 = namingPolicy66.equals((java.lang.Object) 2);
        generator27.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        java.lang.ClassLoader classLoader81 = null;
        generator79.setClassLoader(classLoader81);
        boolean boolean83 = generator79.getAttemptLoad();
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator79.setClasses(classArray91);
        generator70.setClasses(classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        generator27.setClasses(classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator13.getStrategy();
        boolean boolean38 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        boolean boolean53 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        generator40.setDelegates(objArray63);
        boolean boolean67 = generatorStrategy39.equals((java.lang.Object) generator40);
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator69.getNamingPolicy();
        generator69.setAttemptLoad(false);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        generator69.setClasses(classArray80);
        boolean boolean83 = generator69.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray84 = generatorStrategy39.generate((org.mockito.cglib.core.ClassGenerator) generator69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        boolean boolean17 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray71);
        generator51.setClasses(classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator74.setStrategy(generatorStrategy76);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        generator74.setClasses(classArray83);
        java.lang.Object[] objArray93 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray83, (java.lang.Object[]) classArray94);
        java.lang.Object[] objArray97 = new java.lang.Object[] { 1L, '4', classArray47, generator51, classArray83 };
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        boolean boolean99 = generatorStrategy18.equals((java.lang.Object) classArray98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        boolean boolean67 = generator44.getUseCache();
        generator44.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator44.setStrategy(generatorStrategy70);
        generator44.setAttemptLoad(false);
        java.lang.ClassLoader classLoader74 = generator44.getClassLoader();
        org.mockito.cglib.core.Predicate predicate75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = namingPolicy41.getClassName("hi!", "", (java.lang.Object) generator44, predicate75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        boolean boolean82 = generator0.getUseCache();
        boolean boolean83 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        generator33.setUseCache(false);
        boolean boolean67 = generator33.getUseCache();
        java.lang.ClassLoader classLoader68 = generator33.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator33.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator14.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy46);
        generator14.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader49 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin55.newInstance((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        generator0.setAttemptLoad(true);
        boolean boolean97 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator6.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray38);
        generator17.setDelegates((java.lang.Object[]) classArray38);
        generator17.setAttemptLoad(true);
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator17.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy46);
        generator0.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        generator0.setStyle((int) (short) 1);
        boolean boolean52 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin mixin56 = generator37.create();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        generator37.setDelegates((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray76);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator0.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        boolean boolean58 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setUseCache(true);
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator29, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator0.setClasses(classArray48);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        generator0.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin44.newInstance((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin38.newInstance((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        generator8.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator34.getStrategy();
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        generator34.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray67);
        generator0.setClassLoader(classLoader33);
        java.lang.Class<?> wildcardClass81 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        java.lang.Class<?> wildcardClass30 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator32.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        generator47.setUseCache(true);
        boolean boolean51 = generator47.getUseCache();
        generator47.setAttemptLoad(true);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        generator47.setDelegates(objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy64);
        generator32.setNamingPolicy(namingPolicy64);
        java.lang.ClassLoader classLoader67 = generator32.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator68.setStrategy(generatorStrategy74);
        generator68.setAttemptLoad(true);
        generator68.setUseCache(true);
        boolean boolean80 = generator68.getUseCache();
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        generator68.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray88);
        generator0.setClassLoader(classLoader67);
        boolean boolean93 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        boolean boolean26 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator27.setNamingPolicy(namingPolicy32);
        generator27.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator37.setClassLoader(classLoader42);
        generator37.setStyle(2);
        generator37.setAttemptLoad(false);
        boolean boolean48 = generator37.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy61);
        generator37.setNamingPolicy(namingPolicy61);
        boolean boolean64 = namingPolicy36.equals((java.lang.Object) generator37);
        generator19.setNamingPolicy(namingPolicy36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader66 = generator19.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator43.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setUseCache(true);
        java.lang.Object[] objArray59 = new java.lang.Object[] { generator43, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin42.newInstance(objArray59);
        boolean boolean62 = namingPolicy34.equals((java.lang.Object) objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        java.lang.Class[] classArray88 = null;
        generator63.setClasses(classArray88);
        boolean boolean90 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator63.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator63.getNamingPolicy();
        boolean boolean93 = generator63.getUseCache();
        boolean boolean94 = namingPolicy34.equals((java.lang.Object) generator63);
        java.lang.Object obj95 = null;
        boolean boolean96 = namingPolicy34.equals(obj95);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor53 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(false);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = namingPolicy33.equals((java.lang.Object) classArray54);
        generator0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator61.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setUseCache(true);
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator61, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        java.lang.Class<?> wildcardClass81 = mixin80.getClass();
        org.mockito.cglib.core.Predicate predicate82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = namingPolicy33.getClassName("", "", (java.lang.Object) wildcardClass81, predicate82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        generator0.setDelegates(objArray32);
        boolean boolean37 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        boolean boolean44 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator40.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator40.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator50.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator50.setNamingPolicy(namingPolicy57);
        boolean boolean59 = generator50.getAttemptLoad();
        java.lang.Object[] objArray60 = null;
        generator50.setDelegates(objArray60);
        boolean boolean62 = generator50.getAttemptLoad();
        boolean boolean63 = namingPolicy49.equals((java.lang.Object) boolean62);
        generator0.setNamingPolicy(namingPolicy49);
        java.lang.Object obj67 = null;
        org.mockito.cglib.core.Predicate predicate68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = namingPolicy49.getClassName("hi!", "", obj67, predicate68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        generator39.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray74);
        boolean boolean90 = namingPolicy24.equals((java.lang.Object) mixin89);
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean92 = generator0.getAttemptLoad();
        boolean boolean93 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        java.lang.Class[] classArray52 = null;
        generator27.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator54.getStrategy();
        generator27.setStrategy(generatorStrategy79);
        generator0.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = null;
        generator0.setStrategy(generatorStrategy82);
        boolean boolean84 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator33.getNamingPolicy();
        boolean boolean44 = generator33.getAttemptLoad();
        boolean boolean45 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setUseCache(false);
        boolean boolean48 = generator33.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin49 = generator33.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        boolean boolean25 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        boolean boolean40 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        generator27.setDelegates(objArray50);
        boolean boolean54 = generatorStrategy26.equals((java.lang.Object) generator27);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator27.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator27.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator0.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
        boolean boolean83 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        boolean boolean22 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator18.setNamingPolicy(namingPolicy25);
        boolean boolean27 = generator18.getAttemptLoad();
        java.lang.Object[] objArray28 = null;
        generator18.setDelegates(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray50);
        generator30.setClasses(classArray50);
        generator18.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        boolean boolean64 = generator62.getUseCache();
        java.lang.Object[] objArray66 = new java.lang.Object[] { generator62, true };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator69.setDelegates((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin54.newInstance((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray61);
        java.lang.Object[] objArray82 = null;
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray82);
        java.lang.Class<?> wildcardClass84 = mixin83.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        boolean boolean78 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        boolean boolean82 = generator80.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator80.setAttemptLoad(true);
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray95);
        generator80.setDelegates((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator33.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator33.getClassLoader();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator74.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getUseCache();
        generator15.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator15.getStrategy();
        boolean boolean69 = generatorStrategy14.equals((java.lang.Object) generator15);
        generator15.setStyle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin40.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray61);
        boolean boolean76 = namingPolicy32.equals((java.lang.Object) mixin75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        java.lang.ClassLoader classLoader79 = null;
        generator77.setClassLoader(classLoader79);
        boolean boolean81 = generator77.getAttemptLoad();
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator77.setClasses(classArray89);
        java.lang.ClassLoader classLoader91 = null;
        generator77.setClassLoader(classLoader91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = null;
        generator77.setStrategy(generatorStrategy93);
        boolean boolean95 = namingPolicy32.equals((java.lang.Object) generator77);
        boolean boolean96 = generator77.getUseCache();
        java.lang.ClassLoader classLoader97 = generator77.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator16.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator16.getNamingPolicy();
        generator16.setStyle((int) (byte) 1);
        generator16.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator16.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator16.getNamingPolicy();
        generator16.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = namingPolicy13.getClassName("hi!", "", (java.lang.Object) false, predicate33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator19.setClasses(classArray31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        boolean boolean41 = generator39.getUseCache();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator39, true };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray43);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin46.newInstance((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray56);
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray65);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray85);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(false);
        generator11.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator24.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator24.getStrategy();
        generator11.setStrategy(generatorStrategy39);
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader85);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator17, true };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = namingPolicy19.equals((java.lang.Object) classArray40);
        generator0.setNamingPolicy(namingPolicy19);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        generator4.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        generator39.setClasses(classArray74);
        boolean boolean89 = generatorStrategy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator39.getStrategy();
        generator39.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        boolean boolean24 = generator0.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator32, true };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator39.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setUseCache(true);
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator57, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin56.newInstance(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray73);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getUseCache();
        boolean boolean87 = generator85.getUseCache();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator85, true };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, (java.lang.Object[]) classArray84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray37);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator61.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray71);
        generator0.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = namingPolicy16.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator43.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setUseCache(true);
        java.lang.Object[] objArray59 = new java.lang.Object[] { generator43, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray62);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin85 = null; // flaky: generator0.create();
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(mixin82);
// flaky:         org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator33.getNamingPolicy();
        boolean boolean44 = generator33.getAttemptLoad();
        boolean boolean45 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator33.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        java.lang.Object[] objArray23 = null;
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin26 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        generator50.setClasses(classArray59);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray70);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator75.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        generator75.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator75.getStrategy();
        generator0.setStrategy(generatorStrategy81);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        generator49.setUseCache(true);
        generator49.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator60.setClasses(classArray72);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        boolean boolean82 = generator80.getUseCache();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator80, true };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray84);
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin87.newInstance((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        generator49.setDelegates((java.lang.Object[]) classArray97);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setStyle(2);
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setUseCache(true);
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator24, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        generator44.setClassLoader(classLoader59);
        generator44.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator63.getStrategy();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray78);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        boolean boolean83 = generatorStrategy71.equals((java.lang.Object) classArray82);
        generator44.setClasses(classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean78 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin79 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        generator25.setAttemptLoad(false);
        java.lang.ClassLoader classLoader79 = generator25.getClassLoader();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator25.setStrategy(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setStyle(1);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = generator12.getUseCache();
        generator12.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator38.setClasses(classArray47);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray58);
        generator12.setClasses(classArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator12.getNamingPolicy();
        generator12.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        boolean boolean78 = generator65.getUseCache();
        generator65.setAttemptLoad(false);
        generator65.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin83 = generator65.create();
        java.lang.ClassLoader classLoader84 = generator65.getClassLoader();
        java.lang.ClassLoader classLoader85 = generator65.getClassLoader();
        generator12.setClassLoader(classLoader85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator12.getStrategy();
        generator12.setUseCache(true);
        generator12.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        boolean boolean56 = generator43.getUseCache();
        generator43.setAttemptLoad(false);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator67.setDelegates((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        generator43.setClasses(classArray77);
        java.lang.ClassLoader classLoader79 = generator43.getClassLoader();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        generator43.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        generator10.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator10.getNamingPolicy();
        boolean boolean45 = namingPolicy43.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy43);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator17.setClassLoader(classLoader22);
        generator17.setStyle(2);
        generator17.setAttemptLoad(false);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        boolean boolean36 = generator34.getUseCache();
        java.lang.Object[] objArray38 = new java.lang.Object[] { generator34, true };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator41.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        generator17.setDelegates((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray13);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.Object obj16 = null;
        boolean boolean17 = namingPolicy15.equals(obj16);
        java.lang.Object obj20 = null;
        org.mockito.cglib.core.Predicate predicate21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = namingPolicy15.getClassName("hi!", "", obj20, predicate21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = generator16.getUseCache();
        generator16.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        boolean boolean49 = generator44.getAttemptLoad();
        generator44.setUseCache(false);
        boolean boolean52 = namingPolicy43.equals((java.lang.Object) generator44);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        boolean boolean66 = generator53.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator67.setDelegates((java.lang.Object[]) classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator67.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy76);
        boolean boolean78 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = generator53.getClassLoader();
        generator44.setClassLoader(classLoader79);
        generator0.setClassLoader(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = generatorStrategy15.generate(classGenerator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator13.getStrategy();
        boolean boolean38 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator49.getStrategy();
        generator47.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        java.lang.ClassLoader classLoader72 = null;
        generator70.setClassLoader(classLoader72);
        boolean boolean74 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy75);
        generator47.setNamingPolicy(namingPolicy75);
        boolean boolean78 = generator47.getAttemptLoad();
        boolean boolean79 = namingPolicy46.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator47.getStrategy();
        generator47.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray84 = generatorStrategy39.generate((org.mockito.cglib.core.ClassGenerator) generator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = namingPolicy16.equals((java.lang.Object) classArray37);
        generator9.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator42.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator42.setNamingPolicy(namingPolicy49);
        boolean boolean51 = generator42.getAttemptLoad();
        java.lang.Object[] objArray52 = null;
        generator42.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        generator42.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        boolean boolean79 = namingPolicy16.equals((java.lang.Object) classArray74);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray74);
        java.lang.Class<?> wildcardClass83 = classArray74.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        java.lang.Object[] objArray31 = new java.lang.Object[] { generator15, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin14.newInstance((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        boolean boolean68 = generator66.getUseCache();
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator66, true };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator73.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin59.newInstance((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generatorStrategy32.equals((java.lang.Object) generator33);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        boolean boolean76 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean87 = generatorStrategy77.equals((java.lang.Object) classArray85);
        generator33.setClasses(classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        generator0.setUseCache(false);
        boolean boolean92 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy70);
        generator0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator73.setStrategy(generatorStrategy75);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator73.setClasses(classArray82);
        boolean boolean86 = generator73.getUseCache();
        generator73.setAttemptLoad(false);
        generator73.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin91 = generator73.create();
        java.lang.ClassLoader classLoader92 = generator73.getClassLoader();
        generator73.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator73.getNamingPolicy();
        boolean boolean96 = namingPolicy70.equals((java.lang.Object) generator73);
        org.mockito.cglib.proxy.Mixin mixin97 = generator73.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader71 = null;
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray74);
        generator0.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        boolean boolean95 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator27.setStrategy(generatorStrategy43);
        boolean boolean45 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        generator27.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin25.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator34, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        generator56.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator63.setClasses(classArray75);
        java.lang.ClassLoader classLoader77 = null;
        generator63.setClassLoader(classLoader77);
        boolean boolean79 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy80);
        generator0.setNamingPolicy(namingPolicy80);
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        boolean boolean84 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator38.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator38.setStrategy(generatorStrategy51);
        generator38.setUseCache(false);
        boolean boolean55 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        boolean boolean64 = generator62.getUseCache();
        java.lang.Object[] objArray66 = new java.lang.Object[] { generator62, true };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray66);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = null;
        generator76.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setUseCache(true);
        java.lang.Object[] objArray92 = new java.lang.Object[] { generator76, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin75.newInstance(objArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray92);
        generator38.setClasses(classArray61);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setClasses(classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = generator0.create();
        boolean boolean71 = generator0.getUseCache();
        boolean boolean72 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray52);
        boolean boolean54 = generatorStrategy34.equals((java.lang.Object) mixin53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        generator55.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        boolean boolean62 = generator55.getAttemptLoad();
        generator55.setUseCache(false);
        boolean boolean65 = generator55.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray76);
        generator55.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin92 = generator55.create();
        byte[] byteArray93 = generatorStrategy34.generate((org.mockito.cglib.core.ClassGenerator) generator55);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin94 = generator55.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        boolean boolean41 = generator0.getAttemptLoad();
        boolean boolean42 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass30 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = generator41.getUseCache();
        generator41.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        generator41.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin40.newInstance((java.lang.Object[]) classArray76);
        java.lang.Class<?> wildcardClass92 = mixin91.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        generator20.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator20.setDelegates(objArray33);
        boolean boolean38 = generatorStrategy18.equals((java.lang.Object) objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator39.setStrategy(generatorStrategy65);
        boolean boolean67 = generator39.getUseCache();
        boolean boolean68 = generatorStrategy18.equals((java.lang.Object) generator39);
        generator39.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin72 = generator39.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator71.setDelegates((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setAttemptLoad(true);
        java.lang.ClassLoader classLoader90 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray92);
        generator83.setDelegates(objArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray92);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator20.getStrategy();
        generator20.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        generator20.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator20.getNamingPolicy();
        generator20.setUseCache(true);
        boolean boolean33 = generator20.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setAttemptLoad(false);
        java.lang.ClassLoader classLoader60 = generator34.getClassLoader();
        generator20.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator20.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy62);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        boolean boolean66 = namingPolicy62.equals((java.lang.Object) objArray64);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator23.setClassLoader(classLoader28);
        generator23.setStyle(2);
        generator23.setUseCache(true);
        boolean boolean34 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        generator0.setUseCache(true);
        boolean boolean35 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator2.setStrategy(generatorStrategy4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        generator2.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray50);
        java.lang.Class<?> wildcardClass66 = classArray11.getClass();
        boolean boolean67 = namingPolicy1.equals((java.lang.Object) classArray11);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        boolean boolean78 = generator76.getUseCache();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator76, true };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy1.getClassName("", "hi!", (java.lang.Object) mixin94, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Object[] objArray8 = null;
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator10.setClasses(classArray22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator30, true };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean94 = generator0.getUseCache();
        boolean boolean95 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { 1L, '4', classArray28, generator32, classArray64 };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator10.setClassLoader(classLoader15);
        generator10.setStyle(2);
        generator10.setAttemptLoad(false);
        boolean boolean21 = generator10.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy34);
        generator10.setNamingPolicy(namingPolicy34);
        boolean boolean37 = namingPolicy9.equals((java.lang.Object) generator10);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator10.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        boolean boolean30 = generator0.getUseCache();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator0.setStrategy(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator11.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        boolean boolean24 = generator11.getUseCache();
        generator11.setAttemptLoad(false);
        generator11.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin29 = generator11.create();
        java.lang.ClassLoader classLoader30 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator12.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator27.setStrategy(generatorStrategy31);
        generator12.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator12.getStrategy();
        java.lang.ClassLoader classLoader35 = null;
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        boolean boolean44 = generator42.getUseCache();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator42, true };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator49.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        boolean boolean63 = generatorStrategy34.equals((java.lang.Object) mixin62);
        boolean boolean64 = namingPolicy11.equals((java.lang.Object) mixin62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setUseCache(true);
        generator65.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader74 = null;
        generator65.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator65.getNamingPolicy();
        generator65.setStyle(0);
        boolean boolean79 = namingPolicy11.equals((java.lang.Object) generator65);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator65.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator65.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin25.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator34, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        generator56.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator63.setClasses(classArray75);
        java.lang.ClassLoader classLoader77 = null;
        generator63.setClassLoader(classLoader77);
        boolean boolean79 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy80);
        generator0.setNamingPolicy(namingPolicy80);
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator18.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator18.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator18.setNamingPolicy(namingPolicy29);
        boolean boolean31 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator33.getStrategy();
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator65.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator65, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin64.newInstance(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        boolean boolean85 = generatorStrategy57.equals((java.lang.Object) objArray81);
        boolean boolean86 = generatorStrategy32.equals((java.lang.Object) generatorStrategy57);
        generator0.setStrategy(generatorStrategy57);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator16.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator16.getNamingPolicy();
        generator16.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        generator50.setClasses(classArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator50.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator50.getStrategy();
        generator43.setStrategy(generatorStrategy65);
        generator31.setStrategy(generatorStrategy65);
        boolean boolean68 = generator31.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator31.getNamingPolicy();
        boolean boolean71 = namingPolicy30.equals((java.lang.Object) generator31);
        org.mockito.cglib.core.Predicate predicate72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = namingPolicy13.getClassName("hi!", "", (java.lang.Object) boolean71, predicate72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        boolean boolean25 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        boolean boolean27 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        boolean boolean26 = namingPolicy18.equals((java.lang.Object) generator19);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin27 = generator19.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        boolean boolean56 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        boolean boolean66 = generator53.getUseCache();
        generator53.setAttemptLoad(false);
        generator53.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin71 = generator53.create();
        java.lang.ClassLoader classLoader72 = generator53.getClassLoader();
        java.lang.ClassLoader classLoader73 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator0.getStrategy();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        generator0.setStyle((int) (byte) 0);
        boolean boolean79 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin25.newInstance((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        generator0.setAttemptLoad(true);
        boolean boolean77 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        generator0.setUseCache(true);
        boolean boolean67 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator18.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator18.setStrategy(generatorStrategy26);
        boolean boolean28 = namingPolicy17.equals((java.lang.Object) generator18);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator18.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray30 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        boolean boolean76 = generator25.getAttemptLoad();
        boolean boolean77 = generator25.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        boolean boolean57 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        generator0.setDelegates((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        generator5.setDelegates(objArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray25);
        generator5.setClasses(classArray25);
        boolean boolean28 = generator5.getUseCache();
        generator5.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator31.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator31.setClasses(classArray40);
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray51);
        generator5.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy60);
        generator3.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = null;
        generator64.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator79.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        generator79.setStrategy(generatorStrategy83);
        generator64.setStrategy(generatorStrategy83);
        generator3.setStrategy(generatorStrategy83);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean88 = generator87.getUseCache();
        java.lang.ClassLoader classLoader89 = null;
        generator87.setClassLoader(classLoader89);
        boolean boolean91 = generator87.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = null;
        generator87.setNamingPolicy(namingPolicy92);
        boolean boolean94 = generator87.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator87.getStrategy();
        generator3.setStrategy(generatorStrategy95);
        boolean boolean97 = generatorStrategy2.equals((java.lang.Object) generatorStrategy95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator7.setDelegates((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader81 = generator0.getClassLoader();
        boolean boolean82 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(false);
        generator11.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator24.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator24.getStrategy();
        generator11.setStrategy(generatorStrategy39);
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        generator0.setStyle(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        boolean boolean34 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        boolean boolean49 = generator36.getUseCache();
        generator36.setAttemptLoad(false);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator60.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        generator36.setClasses(classArray70);
        java.lang.ClassLoader classLoader72 = generator36.getClassLoader();
        generator29.setClassLoader(classLoader72);
        generator29.setUseCache(false);
        java.lang.ClassLoader classLoader76 = generator29.getClassLoader();
        boolean boolean77 = namingPolicy28.equals((java.lang.Object) classLoader76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy37);
        generator23.setUseCache(true);
        generator23.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = generatorStrategy22.generate((org.mockito.cglib.core.ClassGenerator) generator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        boolean boolean35 = generator11.getAttemptLoad();
        java.lang.Object[] objArray36 = null;
        generator11.setDelegates(objArray36);
        java.lang.ClassLoader classLoader38 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        boolean boolean63 = generator40.getUseCache();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator40.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator70.getStrategy();
        generator68.setStrategy(generatorStrategy77);
        generator40.setStrategy(generatorStrategy77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy80);
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        java.lang.ClassLoader classLoader6 = null;
        generator1.setClassLoader(classLoader6);
        generator1.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        generator19.setUseCache(false);
        generator19.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        generator27.setClasses(classArray62);
        boolean boolean77 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = generator27.getClassLoader();
        generator19.setClassLoader(classLoader78);
        generator10.setClassLoader(classLoader78);
        generator1.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getAttemptLoad();
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator82.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray89);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator11.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator11.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        generator26.setStrategy(generatorStrategy30);
        generator11.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        generator33.setUseCache(true);
        generator33.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin60 = generator33.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator33.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy61);
        generator0.setNamingPolicy(namingPolicy61);
        boolean boolean64 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator7.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader42 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader42);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin44 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator30.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy34);
        java.lang.Class<?> wildcardClass36 = generator26.getClass();
        boolean boolean37 = generatorStrategy25.equals((java.lang.Object) wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin25.newInstance((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        generator0.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray11);
        generator0.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        boolean boolean60 = generator37.getUseCache();
        generator37.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray83);
        generator37.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray72);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin18.newInstance((java.lang.Object[]) classArray89);
        java.lang.Class<?> wildcardClass91 = mixin18.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray38);
        generator0.setDelegates((java.lang.Object[]) classArray38);
        boolean boolean43 = generator0.getUseCache();
        java.lang.Object[] objArray44 = null;
        generator0.setDelegates(objArray44);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator34.setStrategy(generatorStrategy60);
        generator34.setUseCache(true);
        generator34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator11.setNamingPolicy(namingPolicy18);
        boolean boolean20 = generator11.getAttemptLoad();
        java.lang.Object[] objArray21 = null;
        generator11.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        generator11.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setClasses(classArray43);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(false);
        boolean boolean18 = generator0.getUseCache();
        generator0.setStyle(1);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.create(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator8.setStrategy(generatorStrategy34);
        generator8.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        boolean boolean52 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        generator39.setDelegates(objArray62);
        generator39.setStyle(2);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        generator39.setDelegates(objArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray71);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin7.newInstance((java.lang.Object[]) classArray78);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator14.setUseCache(true);
        generator14.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator43.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator43.getNamingPolicy();
        generator43.setStyle((int) (byte) 1);
        generator43.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator43.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        boolean boolean77 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator25.getStrategy();
        boolean boolean79 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator25.getStrategy();
        boolean boolean81 = generator25.getUseCache();
        boolean boolean82 = generator25.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator25.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy73);
        generator16.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = null;
        generator76.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setUseCache(true);
        java.lang.Object[] objArray92 = new java.lang.Object[] { generator76, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        generator16.setClasses(classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray97);
        boolean boolean99 = namingPolicy14.equals((java.lang.Object) mixin98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(mixin16);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setStyle((int) (byte) 1);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray37);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator61.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray71);
        generator0.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        generator74.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator74.getNamingPolicy();
        generator74.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator74.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray95);
        boolean boolean97 = namingPolicy83.equals((java.lang.Object) mixin96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin85 = generator0.create();
        boolean boolean86 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        boolean boolean78 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        java.lang.Object[] objArray80 = null;
        generator0.setDelegates(objArray80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        java.lang.Class<?> wildcardClass84 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator28.setNamingPolicy(namingPolicy35);
        boolean boolean37 = generator28.getAttemptLoad();
        java.lang.Object[] objArray38 = null;
        generator28.setDelegates(objArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator28.getStrategy();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin46.newInstance((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        boolean boolean83 = generatorStrategy40.equals((java.lang.Object) classArray55);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray55);
        java.lang.Class<?> wildcardClass88 = mixin87.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = namingPolicy20.equals((java.lang.Object) classArray41);
        generator13.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator46.setDelegates(objArray55);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        generator46.setClasses(classArray66);
        boolean boolean69 = generator46.getUseCache();
        generator46.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator46.getStrategy();
        boolean boolean73 = namingPolicy20.equals((java.lang.Object) generator46);
        generator46.setAttemptLoad(false);
        boolean boolean76 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator46.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy78);
        generator0.setStyle((int) (short) 1);
        boolean boolean82 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator40.getStrategy();
        boolean boolean50 = namingPolicy39.equals((java.lang.Object) generator40);
        boolean boolean51 = generator40.getAttemptLoad();
        generator40.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator54.getStrategy();
        generator40.setStrategy(generatorStrategy57);
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator40.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        boolean boolean27 = generator14.getUseCache();
        generator14.setAttemptLoad(false);
        generator14.setAttemptLoad(false);
        boolean boolean32 = generator14.getUseCache();
        java.lang.ClassLoader classLoader33 = generator14.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator34.setClasses(classArray46);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        boolean boolean50 = generator34.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator34.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator34.getStrategy();
        generator14.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        boolean boolean22 = generator17.getAttemptLoad();
        generator17.setUseCache(false);
        generator17.setUseCache(false);
        org.mockito.cglib.core.Predicate predicate27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = namingPolicy14.getClassName("", "", (java.lang.Object) generator17, predicate27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        boolean boolean32 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        generator19.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator46.setDelegates(objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy63);
        generator19.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator66.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        boolean boolean88 = generator86.getUseCache();
        java.lang.Object[] objArray90 = new java.lang.Object[] { generator86, true };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        boolean boolean95 = namingPolicy63.equals((java.lang.Object) mixin94);
        generator0.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        boolean boolean98 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        boolean boolean14 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator12.getStrategy();
        boolean boolean16 = generatorStrategy11.equals((java.lang.Object) generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        generator17.setUseCache(true);
        generator17.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator17.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy44);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator19.getNamingPolicy();
        generator19.setAttemptLoad(false);
        generator19.setUseCache(true);
        generator19.setUseCache(false);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.ClassLoader classLoader35 = null;
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin46.newInstance((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        generator19.setClasses(classArray61);
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator54.setClasses(classArray63);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray71);
        java.lang.Class<?> wildcardClass73 = objArray71.getClass();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        java.lang.Object[] objArray81 = new java.lang.Object[] { classArray26, generator41, objArray51, classArray63, wildcardClass73, classArray79 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Object[] objArray87 = null;
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        boolean boolean50 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator29.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator29.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        boolean boolean69 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator56.getNamingPolicy();
        boolean boolean71 = generatorStrategy54.equals((java.lang.Object) namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator72.getStrategy();
        boolean boolean80 = generatorStrategy54.equals((java.lang.Object) generator72);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator72.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin82 = generator72.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator24.setClasses(classArray36);
        java.lang.ClassLoader classLoader38 = null;
        generator24.setClassLoader(classLoader38);
        boolean boolean40 = generator24.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray62);
        generator24.setDelegates((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        generator0.setDelegates((java.lang.Object[]) classArray62);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray67);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        java.lang.Object obj60 = null;
        org.mockito.cglib.core.Predicate predicate61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = namingPolicy57.getClassName("hi!", "hi!", obj60, predicate61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator0.setNamingPolicy(namingPolicy49);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator16.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator26.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator26.getStrategy();
        generator16.setStrategy(generatorStrategy41);
        generator0.setStrategy(generatorStrategy41);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator27.setDelegates((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray56);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, (java.lang.Object[]) classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin12.newInstance((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray39);
        java.lang.Class<?> wildcardClass42 = classArray23.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator10.setClasses(classArray22);
        java.lang.ClassLoader classLoader24 = null;
        generator10.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator10.setStrategy(generatorStrategy26);
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin35.newInstance((java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        boolean boolean55 = generator53.getUseCache();
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator53, true };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator60.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator10.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator10.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin58.newInstance((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin65.newInstance((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        java.lang.ClassLoader classLoader82 = null;
        generator80.setClassLoader(classLoader82);
        boolean boolean84 = generator80.getAttemptLoad();
        java.lang.Object[] objArray91 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        generator80.setClasses(classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin52.newInstance((java.lang.Object[]) classArray76);
        boolean boolean96 = generatorStrategy20.equals((java.lang.Object) mixin52);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator22.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator22.setNamingPolicy(namingPolicy29);
        boolean boolean31 = generator22.getAttemptLoad();
        java.lang.Object[] objArray32 = null;
        generator22.setDelegates(objArray32);
        boolean boolean34 = generator22.getAttemptLoad();
        generator22.setAttemptLoad(true);
        boolean boolean37 = namingPolicy21.equals((java.lang.Object) generator22);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        generator40.setStyle(1);
        boolean boolean54 = generator40.getUseCache();
        generator40.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator40.getStrategy();
        org.mockito.cglib.core.Predicate predicate58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = namingPolicy21.getClassName("hi!", "hi!", (java.lang.Object) generatorStrategy57, predicate58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        boolean boolean25 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        generator32.setUseCache(false);
        generator32.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        boolean boolean63 = generator40.getUseCache();
        generator40.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator66.setClasses(classArray75);
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray86);
        generator40.setClasses(classArray75);
        boolean boolean90 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader91 = generator40.getClassLoader();
        generator32.setClassLoader(classLoader91);
        generator32.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray95 = generatorStrategy31.generate((org.mockito.cglib.core.ClassGenerator) generator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator29.setNamingPolicy(namingPolicy36);
        boolean boolean38 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator29.getStrategy();
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        generator41.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator41.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator47.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator51.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator47.setNamingPolicy(namingPolicy57);
        boolean boolean59 = generator47.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin66.newInstance((java.lang.Object[]) classArray75);
        generator47.setClasses(classArray75);
        boolean boolean78 = generator47.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray79 = generatorStrategy45.generate((org.mockito.cglib.core.ClassGenerator) generator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator7.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        generator29.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray64);
        generator7.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin mixin81 = generator7.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy82);
        generator0.setUseCache(false);
        boolean boolean86 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator17.setClasses(classArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator17.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator17.setStrategy(generatorStrategy33);
        boolean boolean35 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator36.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy68);
        generator36.setNamingPolicy(namingPolicy68);
        java.lang.ClassLoader classLoader71 = generator36.getClassLoader();
        generator17.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator17.getStrategy();
        boolean boolean74 = namingPolicy5.equals((java.lang.Object) generatorStrategy73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        java.lang.ClassLoader classLoader80 = null;
        generator75.setClassLoader(classLoader80);
        generator75.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator75.getStrategy();
        generator75.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray87 = generatorStrategy73.generate((org.mockito.cglib.core.ClassGenerator) generator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        boolean boolean81 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.Class<?> wildcardClass36 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator63, true };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray77);
        boolean boolean80 = namingPolicy55.equals((java.lang.Object) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        generator41.setAttemptLoad(false);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator41.setDelegates(objArray49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator41.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator59.getStrategy();
        generator59.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        generator59.setStrategy(generatorStrategy67);
        boolean boolean69 = namingPolicy58.equals((java.lang.Object) generator59);
        generator59.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator59.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        generator76.setUseCache(true);
        boolean boolean80 = generator76.getUseCache();
        generator76.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator76.getStrategy();
        generator74.setStrategy(generatorStrategy83);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator74.setDelegates(objArray87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator74.getStrategy();
        boolean boolean93 = namingPolicy72.equals((java.lang.Object) generator74);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = generatorStrategy40.generate((org.mockito.cglib.core.ClassGenerator) generator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        boolean boolean18 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator1.setClassLoader(classLoader3);
        boolean boolean5 = generator1.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray27);
        generator7.setClasses(classArray27);
        boolean boolean30 = namingPolicy6.equals((java.lang.Object) classArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray23);
        java.lang.Class<?> wildcardClass28 = objArray23.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator9.setNamingPolicy(namingPolicy16);
        boolean boolean18 = generator9.getAttemptLoad();
        java.lang.Object[] objArray19 = null;
        generator9.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        generator9.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        boolean boolean55 = generator53.getUseCache();
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator53, true };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator60.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin45.newInstance((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        generator0.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        java.lang.Object[] objArray77 = null;
        org.mockito.cglib.proxy.Mixin mixin78 = mixin76.newInstance(objArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator15.getNamingPolicy();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader41 = generator15.getClassLoader();
        boolean boolean42 = generator15.getAttemptLoad();
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator15.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray47 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) generator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean20 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        boolean boolean79 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator11.setStrategy(generatorStrategy17);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        boolean boolean23 = generator11.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator11.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator42.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setUseCache(true);
        java.lang.Object[] objArray58 = new java.lang.Object[] { generator42, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray58);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        boolean boolean83 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator60.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator85.setDelegates((java.lang.Object[]) classArray92);
        boolean boolean94 = generatorStrategy84.equals((java.lang.Object) classArray92);
        generator0.setStrategy(generatorStrategy84);
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader54 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        generator55.setUseCache(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        java.lang.Class<?> wildcardClass68 = mixin67.getClass();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = null;
        generator76.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setUseCache(true);
        java.lang.Object[] objArray92 = new java.lang.Object[] { generator76, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin75.newInstance(objArray92);
        java.lang.Class<?> wildcardClass95 = mixin94.getClass();
        java.lang.Class[] classArray96 = new java.lang.Class[] { wildcardClass68, wildcardClass95 };
        generator55.setClasses(classArray96);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray96);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator11.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator11.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        generator26.setStrategy(generatorStrategy30);
        generator11.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        generator33.setUseCache(true);
        generator33.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin60 = generator33.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator33.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy61);
        generator0.setNamingPolicy(namingPolicy61);
        java.lang.Class<?> wildcardClass64 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        boolean boolean29 = generator16.getUseCache();
        generator16.setAttemptLoad(false);
        generator16.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin34 = generator16.create();
        java.lang.ClassLoader classLoader35 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader36 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        generator0.setDelegates(objArray39);
        boolean boolean46 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader49 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator20.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator20.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator20.getAttemptLoad();
        java.lang.Object[] objArray30 = null;
        generator20.setDelegates(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator32.setClasses(classArray44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        boolean boolean54 = generator52.getUseCache();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator52, true };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        boolean boolean69 = generator67.getUseCache();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator67, true };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator74.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        generator20.setDelegates((java.lang.Object[]) classArray44);
        generator0.setClasses(classArray44);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        boolean boolean38 = generator25.getUseCache();
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        java.lang.ClassLoader classLoader44 = generator25.getClassLoader();
        java.lang.ClassLoader classLoader45 = generator25.getClassLoader();
        boolean boolean46 = generatorStrategy24.equals((java.lang.Object) classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        generator47.setAttemptLoad(false);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator47.setDelegates(objArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator47.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator65.getStrategy();
        generator65.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator71.getStrategy();
        generator65.setStrategy(generatorStrategy73);
        boolean boolean75 = namingPolicy64.equals((java.lang.Object) generator65);
        generator65.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator65.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy78);
        boolean boolean80 = generatorStrategy24.equals((java.lang.Object) generator47);
        java.lang.Class<?> wildcardClass81 = generatorStrategy24.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        boolean boolean61 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin42.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator58.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator58.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator62.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator58.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator58.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = namingPolicy55.getClassName("", "", (java.lang.Object) namingPolicy71, predicate72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        boolean boolean13 = generator9.getAttemptLoad();
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator15.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        generator15.setClasses(classArray24);
        boolean boolean28 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin29 = generator15.create();
        java.lang.ClassLoader classLoader30 = generator15.getClassLoader();
        generator15.setUseCache(false);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray46);
        generator15.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, (java.lang.Object[]) classArray89);
        boolean boolean93 = namingPolicy58.equals((java.lang.Object) classArray89);
        generator15.setNamingPolicy(namingPolicy58);
        generator9.setNamingPolicy(namingPolicy58);
        generator0.setNamingPolicy(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        boolean boolean42 = generator40.getUseCache();
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator40, true };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator65.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator65, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin64.newInstance(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray81);
        generator0.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray79, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator7.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader42 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        generator44.setUseCache(true);
        generator44.setUseCache(false);
        java.lang.ClassLoader classLoader71 = generator44.getClassLoader();
        generator0.setClassLoader(classLoader71);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin76 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy75);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin49.newInstance((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass95 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        boolean boolean31 = generator0.getUseCache();
        boolean boolean32 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        generator36.setDelegates((java.lang.Object[]) classArray57);
        generator36.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator63.setClasses(classArray75);
        java.lang.ClassLoader classLoader77 = null;
        generator63.setClassLoader(classLoader77);
        boolean boolean79 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator63.getStrategy();
        generator36.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator36.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = generatorStrategy35.generate((org.mockito.cglib.core.ClassGenerator) generator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        generator10.setUseCache(true);
        generator10.setUseCache(false);
        java.lang.ClassLoader classLoader37 = generator10.getClassLoader();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator67.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        boolean boolean78 = generator74.getUseCache();
        generator74.setUseCache(true);
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator67, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        boolean boolean92 = namingPolicy66.equals((java.lang.Object) classArray90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator9.setNamingPolicy(namingPolicy16);
        boolean boolean18 = generator9.getAttemptLoad();
        java.lang.Object[] objArray19 = null;
        generator9.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator21.getStrategy();
        generator21.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator31.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator31.setClasses(classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator31.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator31.getStrategy();
        generator21.setStrategy(generatorStrategy46);
        generator9.setStrategy(generatorStrategy46);
        java.lang.Object obj49 = null;
        boolean boolean50 = generatorStrategy46.equals(obj49);
        boolean boolean51 = namingPolicy8.equals((java.lang.Object) boolean50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator54.setClasses(classArray66);
        java.lang.ClassLoader classLoader68 = null;
        generator54.setClassLoader(classLoader68);
        boolean boolean70 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator54.getNamingPolicy();
        java.lang.ClassLoader classLoader72 = generator54.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator54.getStrategy();
        org.mockito.cglib.core.Predicate predicate75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = namingPolicy8.getClassName("hi!", "hi!", (java.lang.Object) generatorStrategy74, predicate75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass33 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = generator35.getUseCache();
        generator35.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        generator35.setClasses(classArray70);
        boolean boolean85 = generatorStrategy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        generator86.setUseCache(true);
        generator86.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator86.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy92);
        boolean boolean94 = namingPolicy9.equals((java.lang.Object) generator35);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator35.getNamingPolicy();
        generator35.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        boolean boolean51 = generator0.getUseCache();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean55 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        boolean boolean62 = namingPolicy7.equals((java.lang.Object) true);
        java.lang.Class<?> wildcardClass63 = namingPolicy7.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator9.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        generator9.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader44 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray65);
        generator0.setClassLoader(classLoader44);
        boolean boolean70 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator51.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setUseCache(true);
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator51, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        boolean boolean71 = namingPolicy50.equals((java.lang.Object) mixin70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator60.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator0.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, (java.lang.Object[]) classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin12.newInstance((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Object[] objArray30 = null;
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        boolean boolean45 = generator32.getUseCache();
        generator32.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin48 = generator32.create();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray55);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin57.newInstance((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator66.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setUseCache(true);
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator66, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        generator32.setClasses(classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin31.newInstance((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass92 = generatorStrategy91.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        generator18.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator53.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator53.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator63.getStrategy();
        generator53.setStrategy(generatorStrategy88);
        generator0.setStrategy(generatorStrategy88);
        java.lang.ClassLoader classLoader91 = null;
        java.lang.ClassLoader classLoader92 = null;
        java.lang.Object[] objArray94 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader92, objArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader91, objArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(objArray94);
        generator0.setDelegates(objArray94);
        boolean boolean99 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[10]");
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin31.newInstance((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray69);
        generator0.setClasses(classArray20);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        java.lang.Class<?> wildcardClass76 = mixin75.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray70);
        generator50.setClasses(classArray70);
        boolean boolean73 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator75.setDelegates((java.lang.Object[]) classArray82);
        boolean boolean84 = generatorStrategy74.equals((java.lang.Object) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator26.setClasses(classArray85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator26.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        generator11.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        generator11.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy66);
        generator9.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        java.lang.ClassLoader classLoader71 = null;
        generator69.setClassLoader(classLoader71);
        boolean boolean73 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator69.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        generator76.setUseCache(true);
        boolean boolean80 = generator76.getUseCache();
        generator76.setUseCache(true);
        java.lang.Object[] objArray85 = new java.lang.Object[] { generator69, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator9.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray27);
        generator7.setClasses(classArray27);
        java.lang.Object[] objArray30 = null;
        generator7.setDelegates(objArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = null;
        generator33.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator33.getNamingPolicy();
        boolean boolean43 = generator33.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator44.setClassLoader(classLoader49);
        generator44.setStyle(2);
        generator44.setAttemptLoad(false);
        boolean boolean55 = generator44.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy68);
        generator44.setNamingPolicy(namingPolicy68);
        generator33.setNamingPolicy(namingPolicy68);
        generator7.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        boolean boolean57 = generator0.getAttemptLoad();
        boolean boolean58 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        boolean boolean73 = generator60.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin74 = generator60.create();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        generator75.setClassLoader(classLoader77);
        boolean boolean79 = generator75.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        generator75.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        generator82.setUseCache(true);
        boolean boolean86 = generator82.getUseCache();
        generator82.setUseCache(true);
        java.lang.Object[] objArray91 = new java.lang.Object[] { generator75, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin74.newInstance((java.lang.Object[]) classArray94);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass26 = mixin25.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy73);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray82, (java.lang.Object[]) classArray90);
        boolean boolean93 = namingPolicy73.equals((java.lang.Object) mixin92);
        generator0.setNamingPolicy(namingPolicy73);
        java.lang.ClassLoader classLoader95 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin46.newInstance((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        java.lang.Class<?> wildcardClass61 = mixin60.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = generator41.getUseCache();
        generator41.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        generator41.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin40.newInstance((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class<?> wildcardClass95 = classArray76.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        generator0.setStyle(0);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        generator20.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator20.setDelegates(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        generator0.setDelegates(objArray28);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator44.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator56.setClasses(classArray68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        boolean boolean78 = generator76.getUseCache();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator76, true };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray80);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin83.newInstance((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray89);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy33.getClassName("hi!", "hi!", (java.lang.Object) classArray51, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator28.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin38.newInstance((java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator63.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray55);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        boolean boolean75 = generatorStrategy32.equals((java.lang.Object) classArray55);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        boolean boolean57 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray78);
        generator58.setClasses(classArray78);
        boolean boolean81 = generator58.getUseCache();
        generator58.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = null;
        generator58.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator58.getStrategy();
        generator0.setStrategy(generatorStrategy86);
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray95);
        generator0.setClasses(classArray95);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy55);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        generator5.setAttemptLoad(false);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        generator5.setDelegates(objArray13);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin41.newInstance((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin35.newInstance((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator5.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin4.newInstance((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy63);
        generator0.setNamingPolicy(namingPolicy63);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator28.setStrategy(generatorStrategy34);
        generator28.setAttemptLoad(true);
        generator28.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray51);
        generator28.setClasses(classArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        generator28.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        boolean boolean84 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass85 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = namingPolicy19.equals((java.lang.Object) classArray40);
        generator12.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = generator45.getUseCache();
        generator45.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator45.getStrategy();
        boolean boolean72 = namingPolicy19.equals((java.lang.Object) generator45);
        generator45.setAttemptLoad(false);
        boolean boolean75 = generator45.getAttemptLoad();
        boolean boolean76 = generator45.getUseCache();
        generator45.setUseCache(false);
        boolean boolean79 = generatorStrategy11.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        boolean boolean32 = generator19.getUseCache();
        generator19.setAttemptLoad(false);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator43.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator19.setClasses(classArray53);
        java.lang.ClassLoader classLoader55 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader55);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classLoader55);
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator13.getStrategy();
        boolean boolean38 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        boolean boolean54 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        generator41.setDelegates(objArray64);
        generator41.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator41.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator41.getNamingPolicy();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        boolean boolean84 = namingPolicy71.equals((java.lang.Object) mixin83);
        boolean boolean85 = generatorStrategy39.equals((java.lang.Object) mixin83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        generator9.setUseCache(true);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader36);
        java.lang.Class<?> wildcardClass89 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        generator19.setAttemptLoad(true);
        generator19.setUseCache(true);
        boolean boolean31 = generator19.getUseCache();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        generator19.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator42.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = null;
        generator42.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator42.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        boolean boolean38 = generator25.getUseCache();
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        java.lang.ClassLoader classLoader44 = generator25.getClassLoader();
        java.lang.ClassLoader classLoader45 = generator25.getClassLoader();
        boolean boolean46 = generatorStrategy24.equals((java.lang.Object) classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        generator47.setAttemptLoad(false);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator47.setDelegates(objArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator47.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator65.getStrategy();
        generator65.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator71.getStrategy();
        generator65.setStrategy(generatorStrategy73);
        boolean boolean75 = namingPolicy64.equals((java.lang.Object) generator65);
        generator65.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator65.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy78);
        boolean boolean80 = generatorStrategy24.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator47.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator47.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray27);
        generator7.setClasses(classArray27);
        boolean boolean30 = generator7.getUseCache();
        generator7.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray53);
        generator7.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        boolean boolean72 = generator70.getUseCache();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator70, true };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator77.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray84);
        boolean boolean87 = namingPolicy62.equals((java.lang.Object) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray89);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator23.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        generator34.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator41.getStrategy();
        generator34.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator34.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator34.getStrategy();
        boolean boolean49 = namingPolicy32.equals((java.lang.Object) generatorStrategy48);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        boolean boolean74 = generator61.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator61.setDelegates(objArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin60.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray84);
        boolean boolean91 = generatorStrategy48.equals((java.lang.Object) objArray84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        boolean boolean29 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy39);
        boolean boolean41 = generator16.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = generator16.getClassLoader();
        boolean boolean43 = namingPolicy15.equals((java.lang.Object) generator16);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        generator46.setAttemptLoad(true);
        boolean boolean51 = generator46.getUseCache();
        org.mockito.cglib.core.Predicate predicate52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = namingPolicy15.getClassName("", "hi!", (java.lang.Object) generator46, predicate52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        boolean boolean33 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        boolean boolean36 = namingPolicy27.equals((java.lang.Object) generator28);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        boolean boolean52 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator54.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setUseCache(true);
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator54, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        boolean boolean78 = namingPolicy53.equals((java.lang.Object) classArray77);
        generator28.setDelegates((java.lang.Object[]) classArray77);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator28.setClasses(classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setUseCache(true);
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator41, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin40.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin33.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        generator0.setDelegates(objArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        generator10.setClasses(classArray19);
        boolean boolean23 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        generator10.setDelegates(objArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin9.newInstance(objArray33);
        java.lang.Class<?> wildcardClass39 = mixin38.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray28);
        boolean boolean31 = generatorStrategy24.equals((java.lang.Object) classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator34.getStrategy();
        generator32.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy60);
        generator32.setNamingPolicy(namingPolicy60);
        boolean boolean63 = generatorStrategy24.equals((java.lang.Object) generator32);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator32.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator30.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator30.setClassLoader(classLoader44);
        boolean boolean46 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator30.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray54);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        boolean boolean63 = namingPolicy47.equals((java.lang.Object) mixin62);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean65 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator11.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator11.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        generator11.setNamingPolicy(namingPolicy43);
        java.lang.ClassLoader classLoader46 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator47.setClassLoader(classLoader49);
        boolean boolean51 = generator47.getAttemptLoad();
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator47.setClasses(classArray59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        boolean boolean69 = generator67.getUseCache();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator67, true };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray82);
        generator0.setClassLoader(classLoader46);
        java.lang.Object[] objArray90 = null;
        generator0.setDelegates(objArray90);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator37.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator37.getNamingPolicy();
        generator37.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator37.getNamingPolicy();
        generator37.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        boolean boolean64 = generator51.getUseCache();
        generator51.setAttemptLoad(false);
        generator51.setAttemptLoad(false);
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        boolean boolean78 = generator74.getUseCache();
        java.lang.ClassLoader classLoader79 = null;
        generator74.setClassLoader(classLoader79);
        generator74.setStyle(2);
        generator74.setUseCache(true);
        boolean boolean85 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator74.getStrategy();
        generator51.setStrategy(generatorStrategy86);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator51.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy88);
        generator0.setNamingPolicy(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        boolean boolean83 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator60.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator85.setDelegates((java.lang.Object[]) classArray92);
        boolean boolean94 = generatorStrategy84.equals((java.lang.Object) classArray92);
        generator0.setStrategy(generatorStrategy84);
        java.lang.Class<?> wildcardClass96 = generatorStrategy84.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator11.setStrategy(generatorStrategy17);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        boolean boolean23 = generator11.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator11.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray42);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        boolean boolean22 = generator0.getUseCache();
        java.lang.Object[] objArray23 = null;
        generator0.setDelegates(objArray23);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        generator57.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator66.setClasses(classArray75);
        boolean boolean79 = generator66.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator66.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator66.getStrategy();
        generator57.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator57.getStrategy();
        generator0.setStrategy(generatorStrategy84);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean26 = generator0.getAttemptLoad();
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator31.getStrategy();
        generator29.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator29.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        generator47.setUseCache(true);
        boolean boolean51 = generator47.getUseCache();
        generator47.setAttemptLoad(true);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        generator47.setDelegates(objArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray67);
        generator47.setClasses(classArray67);
        boolean boolean70 = namingPolicy46.equals((java.lang.Object) classArray67);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray77);
        boolean boolean81 = namingPolicy46.equals((java.lang.Object) classArray77);
        generator29.setNamingPolicy(namingPolicy46);
        boolean boolean83 = namingPolicy28.equals((java.lang.Object) namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator29.setNamingPolicy(namingPolicy36);
        boolean boolean38 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator29.getStrategy();
        generator0.setStrategy(generatorStrategy39);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass43 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator6.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator6.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        generator7.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        boolean boolean44 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator40.setStrategy(generatorStrategy46);
        generator40.setAttemptLoad(true);
        generator40.setUseCache(true);
        boolean boolean52 = generator40.getUseCache();
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        generator40.setDelegates((java.lang.Object[]) classArray60);
        boolean boolean63 = namingPolicy14.equals((java.lang.Object) generator40);
        generator0.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        boolean boolean68 = namingPolicy14.equals((java.lang.Object) generator65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator75, true };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        boolean boolean84 = namingPolicy14.equals((java.lang.Object) objArray79);
        java.lang.Class<?> wildcardClass85 = objArray79.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass45 = mixin44.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator53.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator53.getStrategy();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        boolean boolean78 = generator76.getUseCache();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator76, true };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        boolean boolean95 = generatorStrategy68.equals((java.lang.Object) classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator10.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        boolean boolean17 = generatorStrategy9.equals((java.lang.Object) generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator18.getStrategy();
        generator18.setUseCache(false);
        boolean boolean28 = generator18.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray70);
        generator50.setClasses(classArray70);
        boolean boolean73 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator75.setDelegates((java.lang.Object[]) classArray82);
        boolean boolean84 = generatorStrategy74.equals((java.lang.Object) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator26.setClasses(classArray85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator26.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        java.lang.ClassLoader classLoader89 = generator0.getClassLoader();
        java.lang.Object[] objArray90 = new java.lang.Object[] {};
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader89, (java.lang.Object[]) classArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator7.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader42 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator44.getStrategy();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        boolean boolean64 = generatorStrategy52.equals((java.lang.Object) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin22.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator0.setStrategy(generatorStrategy19);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        generator32.setDelegates(objArray85);
        generator0.setDelegates(objArray85);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        generator0.setClasses(classArray23);
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        java.lang.Object[] objArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray59);
        generator0.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator64.getStrategy();
        generator64.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator70.getStrategy();
        generator64.setStrategy(generatorStrategy72);
        generator0.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        generator75.setClassLoader(classLoader77);
        boolean boolean79 = generator75.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator75.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator75.setStrategy(generatorStrategy81);
        generator75.setAttemptLoad(true);
        generator75.setUseCache(true);
        boolean boolean87 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator75.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator89.getNamingPolicy();
        generator89.setUseCache(false);
        boolean boolean93 = generatorStrategy88.equals((java.lang.Object) false);
        generator0.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        generator0.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator0.setStrategy(generatorStrategy55);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        generator0.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin36.newInstance((java.lang.Object[]) classArray43);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        java.lang.ClassLoader classLoader72 = null;
        generator70.setClassLoader(classLoader72);
        boolean boolean74 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator70.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        generator77.setUseCache(true);
        boolean boolean81 = generator77.getUseCache();
        generator77.setUseCache(true);
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator70, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin69.newInstance(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = namingPolicy20.equals((java.lang.Object) classArray41);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray51);
        boolean boolean55 = namingPolicy20.equals((java.lang.Object) classArray51);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass59 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        generator0.setDelegates(objArray41);
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        boolean boolean36 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        generator23.setDelegates(objArray46);
        generator23.setStyle(2);
        boolean boolean52 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean60 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        boolean boolean77 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator25.getStrategy();
        boolean boolean79 = generator25.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator25.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        generator0.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin29);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator8.getNamingPolicy();
        generator8.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator8.getClassLoader();
        boolean boolean35 = generator8.getAttemptLoad();
        boolean boolean36 = generator8.getAttemptLoad();
        generator8.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator39.setStrategy(generatorStrategy45);
        generator39.setAttemptLoad(true);
        generator39.setUseCache(false);
        java.lang.Object[] objArray51 = null;
        generator39.setDelegates(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        generator39.setNamingPolicy(namingPolicy58);
        generator8.setNamingPolicy(namingPolicy58);
        java.lang.Object obj85 = null;
        boolean boolean86 = namingPolicy58.equals(obj85);
        generator0.setNamingPolicy(namingPolicy58);
        java.lang.Object obj88 = null;
        boolean boolean89 = namingPolicy58.equals(obj88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin18.newInstance((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        boolean boolean55 = generatorStrategy12.equals((java.lang.Object) classArray27);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray27);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = mixin56.newInstance((java.lang.Object[]) classArray66);
        java.lang.Class<?> wildcardClass68 = mixin56.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy29);
        generator17.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator17.getStrategy();
        generator0.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.ClassLoader classLoader36 = null;
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray54);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin47.newInstance((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        generator0.setClasses(classArray64);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setStyle(2);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        generator0.setClasses(classArray60);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator10.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        boolean boolean17 = generatorStrategy9.equals((java.lang.Object) generatorStrategy16);
        org.mockito.cglib.core.ClassGenerator classGenerator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = generatorStrategy16.generate(classGenerator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator53.setClasses(classArray65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray77);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin80.newInstance((java.lang.Object[]) classArray86);
        generator0.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Object[] objArray92 = null;
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray86, objArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getAttemptLoad();
        boolean boolean11 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        generator7.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class<?> wildcardClass20 = mixin19.getClass();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator28, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin27.newInstance(objArray44);
        java.lang.Class<?> wildcardClass47 = mixin46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass20, wildcardClass47 };
        generator7.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator0.setClasses(classArray48);
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor53 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        boolean boolean24 = generator22.getUseCache();
        java.lang.Object[] objArray26 = new java.lang.Object[] { generator22, true };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator29.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        generator52.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin51.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin38.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        generator0.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        boolean boolean54 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray71);
        generator51.setClasses(classArray71);
        generator51.setUseCache(true);
        generator51.setUseCache(false);
        java.lang.ClassLoader classLoader78 = generator51.getClassLoader();
        generator0.setClassLoader(classLoader78);
        boolean boolean80 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin85 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        generator0.setClasses(classArray32);
        generator0.setUseCache(false);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        generator40.setUseCache(true);
        generator40.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin67 = generator40.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        java.lang.ClassLoader classLoader71 = null;
        generator69.setClassLoader(classLoader71);
        boolean boolean73 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator69.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = null;
        generator69.setNamingPolicy(namingPolicy76);
        boolean boolean78 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator69.getStrategy();
        generator40.setStrategy(generatorStrategy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        generator81.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator81.getStrategy();
        generator40.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        boolean boolean43 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        generator30.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        java.lang.ClassLoader classLoader71 = null;
        generator69.setClassLoader(classLoader71);
        boolean boolean73 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy74);
        generator30.setNamingPolicy(namingPolicy74);
        generator30.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin79 = generator30.create();
        boolean boolean80 = generatorStrategy29.equals((java.lang.Object) generator30);
        boolean boolean81 = generator30.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        generator12.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy18);
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator22.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator22.setNamingPolicy(namingPolicy29);
        boolean boolean31 = generator22.getAttemptLoad();
        java.lang.Object[] objArray32 = null;
        generator22.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator34.getStrategy();
        generator34.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator44.getStrategy();
        generator34.setStrategy(generatorStrategy59);
        generator22.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin67.newInstance((java.lang.Object[]) classArray76);
        boolean boolean79 = generatorStrategy59.equals((java.lang.Object) classArray76);
        generator0.setDelegates((java.lang.Object[]) classArray76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        boolean boolean12 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator15.setDelegates((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader24 = null;
        generator15.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator15.create();
        java.lang.ClassLoader classLoader28 = generator15.getClassLoader();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        boolean boolean38 = generator36.getUseCache();
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator36, true };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator43.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin54.newInstance((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray77);
        generator0.setClassLoader(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        generator0.setStyle(0);
        boolean boolean73 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        boolean boolean11 = generator0.getAttemptLoad();
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.Object obj16 = null;
        boolean boolean17 = generatorStrategy15.equals(obj16);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        boolean boolean30 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = generator16.getUseCache();
        generator16.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray62);
        generator16.setClasses(classArray51);
        boolean boolean66 = generator16.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray74);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray83);
        generator0.setDelegates(objArray83);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin90 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        boolean boolean29 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy39);
        boolean boolean41 = generator16.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = generator16.getClassLoader();
        boolean boolean43 = namingPolicy15.equals((java.lang.Object) generator16);
        java.lang.Class[] classArray44 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        boolean boolean58 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        generator45.setDelegates(objArray68);
        generator45.setStyle(2);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator45.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray77);
        java.lang.Class<?> wildcardClass85 = objArray77.getClass();
        boolean boolean86 = namingPolicy15.equals((java.lang.Object) objArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader40 = generator15.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        generator41.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator41.getStrategy();
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        generator41.setDelegates((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray74);
        generator0.setClassLoader(classLoader40);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        boolean boolean16 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator48.getStrategy();
        generator41.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        generator41.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        generator77.setUseCache(true);
        boolean boolean81 = generator77.getUseCache();
        generator77.setAttemptLoad(true);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        generator77.setDelegates(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray86);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        java.lang.Class<?> wildcardClass92 = objArray86.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin29.newInstance((java.lang.Object[]) classArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        boolean boolean49 = generator47.getUseCache();
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator47, true };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator54.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        generator67.setUseCache(true);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin79.newInstance((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator9.setClassLoader(classLoader14);
        generator9.setStyle(2);
        generator9.setAttemptLoad(false);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator26, true };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator33.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        generator9.setDelegates((java.lang.Object[]) classArray40);
        boolean boolean45 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin48 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass49 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator27.setStrategy(generatorStrategy43);
        boolean boolean45 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        generator27.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        java.lang.Class[] classArray84 = null;
        generator0.setClasses(classArray84);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator27.setStrategy(generatorStrategy43);
        boolean boolean45 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        generator27.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass29 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        boolean boolean21 = generatorStrategy14.equals((java.lang.Object) generator15);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        boolean boolean35 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        generator22.setDelegates(objArray45);
        generator22.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator22.getNamingPolicy();
        boolean boolean52 = generatorStrategy14.equals((java.lang.Object) generator22);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator22.getNamingPolicy();
        java.lang.Object obj56 = new java.lang.Object();
        org.mockito.cglib.core.Predicate predicate57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = namingPolicy53.getClassName("", "hi!", obj56, predicate57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator33.getNamingPolicy();
        boolean boolean44 = generator33.getAttemptLoad();
        boolean boolean45 = namingPolicy7.equals((java.lang.Object) generator33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader46 = generator33.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator49, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator30.setClasses(classArray68);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        boolean boolean71 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin27.newInstance((java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator45, true };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        boolean boolean64 = generatorStrategy21.equals((java.lang.Object) classArray44);
        generator0.setStrategy(generatorStrategy21);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        generator32.setDelegates(objArray85);
        generator0.setDelegates(objArray85);
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setStyle(1);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        generator21.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator21.setDelegates(objArray34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator21.getStrategy();
        boolean boolean40 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator41.setClasses(classArray53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator61, true };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        generator21.setDelegates((java.lang.Object[]) classArray82);
        org.mockito.cglib.core.Predicate predicate84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = namingPolicy18.getClassName("hi!", "hi!", (java.lang.Object) classArray82, predicate84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin37 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator13.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        generator13.setClassLoader(classLoader27);
        boolean boolean29 = generator13.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray51);
        generator13.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin58);
    }
}
